// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TournamentFormat {
  SINGLE_ELIMINATION
  DOUBLE_ELIMINATION
  ROUND_ROBIN
  SWISS_SYSTEM
}

enum TournamentStatus {
  DRAFT
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ParticipantStatus {
  REGISTERED
  CONFIRMED
  ACTIVE
  ELIMINATED
  WITHDRAWN
  DISQUALIFIED
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum BracketPosition {
  WINNERS
  LOSERS
  FINALS
}

model Tournament {
  id                    String            @id @default(cuid())
  name                  String
  description           String?
  format                TournamentFormat
  status                TournamentStatus  @default(DRAFT)
  maxParticipants       Int?
  minParticipants       Int               @default(2)
  entryFee              Decimal?          @db.Decimal(10, 2)
  prizePool             Decimal?          @db.Decimal(10, 2)
  registrationStartAt   DateTime
  registrationEndAt     DateTime
  startAt               DateTime
  endAt                 DateTime?
  rules                 Json?
  settings              Json?
  metadata              Json?
  isPublic              Boolean           @default(true)
  allowLateRegistration Boolean           @default(false)
  requireApproval       Boolean           @default(false)
  seeding               Json?             // Seeding configuration
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  createdBy             String

  participants          TournamentParticipant[]
  matches               Match[]
  brackets              Bracket[]
  prizeDistributions    PrizeDistribution[]
  tournamentEvents      TournamentEvent[]

  @@map("tournaments")
}

model TournamentParticipant {
  id                    String            @id @default(cuid())
  tournamentId          String
  playerId              String
  teamId                String?
  status                ParticipantStatus @default(REGISTERED)
  seed                  Int?
  registeredAt          DateTime          @default(now())
  confirmedAt           DateTime?
  eliminatedAt          DateTime?
  eliminatedInRound     Int?
  currentRank           Int?
  points                Int               @default(0)
  wins                  Int               @default(0)
  losses                Int               @default(0)
  draws                 Int               @default(0)
  metadata              Json?

  tournament            Tournament        @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  homeMatches           Match[]           @relation("HomeParticipant")
  awayMatches           Match[]           @relation("AwayParticipant")
  matchResults          MatchResult[]

  @@unique([tournamentId, playerId])
  @@map("tournament_participants")
}

model Bracket {
  id                    String            @id @default(cuid())
  tournamentId          String
  position              BracketPosition
  round                 Int
  matchNumber           Int
  nextMatchId           String?
  previousMatch1Id      String?
  previousMatch2Id      String?
  structure             Json              // Bracket structure data
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  tournament            Tournament        @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  matches               Match[]

  @@unique([tournamentId, position, round, matchNumber])
  @@map("brackets")
}

model Match {
  id                    String            @id @default(cuid())
  tournamentId          String
  bracketId             String?
  round                 Int
  matchNumber           Int
  homeParticipantId     String?
  awayParticipantId     String?
  status                MatchStatus       @default(SCHEDULED)
  scheduledAt           DateTime?
  startedAt             DateTime?
  completedAt           DateTime?
  homeScore             Int?
  awayScore             Int?
  winnerId              String?
  isDraw                Boolean           @default(false)
  metadata              Json?
  notes                 String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  tournament            Tournament        @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  bracket               Bracket?          @relation(fields: [bracketId], references: [id])
  homeParticipant       TournamentParticipant? @relation("HomeParticipant", fields: [homeParticipantId], references: [id])
  awayParticipant       TournamentParticipant? @relation("AwayParticipant", fields: [awayParticipantId], references: [id])
  results               MatchResult[]

  @@unique([tournamentId, round, matchNumber])
  @@map("matches")
}

model MatchResult {
  id                    String            @id @default(cuid())
  matchId               String
  participantId         String
  score                 Int
  performance           Json?             // Performance metrics
  recordedAt            DateTime          @default(now())

  match                 Match             @relation(fields: [matchId], references: [id], onDelete: Cascade)
  participant           TournamentParticipant @relation(fields: [participantId], references: [id])

  @@unique([matchId, participantId])
  @@map("match_results")
}

model PrizeDistribution {
  id                    String            @id @default(cuid())
  tournamentId          String
  rank                  Int
  prizeAmount           Decimal           @db.Decimal(10, 2)
  prizeType             String            // CASH, ITEM, POINTS, etc.
  prizeData             Json?             // Additional prize information
  winnerId              String?
  distributedAt         DateTime?
  createdAt             DateTime          @default(now())

  tournament            Tournament        @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, rank])
  @@map("prize_distributions")
}

model TournamentEvent {
  id                    String            @id @default(cuid())
  tournamentId          String
  eventType             String
  eventData             Json
  createdAt             DateTime          @default(now())

  tournament            Tournament        @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@map("tournament_events")
}
